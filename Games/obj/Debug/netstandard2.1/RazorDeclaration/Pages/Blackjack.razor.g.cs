// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Games.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Blackjack\BlazorGames\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Blackjack\BlazorGames\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Blackjack\BlazorGames\_Imports.razor"
using Games;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Blackjack\BlazorGames\_Imports.razor"
using Games.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Blackjack\BlazorGames\Pages\Blackjack.razor"
using Games.Models.Blackjack;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Blackjack\BlazorGames\Pages\Blackjack.razor"
using Games.Models.Blackjack.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Blackjack\BlazorGames\Pages\Blackjack.razor"
using Games.Pages.Partials;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/blackjack")]
    public partial class Blackjack : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 9 "C:\Blackjack\BlazorGames\Pages\Blackjack.razor"
       
    Dealer dealer = new Dealer(); //Creating a new Dealer also creates a new, shuffled CardDeck
    Player player = new Player();

    GameState state = GameState.NotStarted;

    public async Task InitializeHand()
    {
        if (dealer.Deck.Count < 13)
        {
            state = GameState.Shuffling;
            dealer.Deck = new CardDeck();
            await Delay(1000);
        }

        state = GameState.Betting;
    }

    public async Task Bet(decimal amount)
    {
        if (player.Funds >= amount)
        {
            player.Bet += amount;
            await Deal();
        }
    }

    public async Task Deal()
    {
        state = GameState.Dealing;
        //Deal a card to each player. The dealer's card is not visible.
        await dealer.DealToPlayer(player);
        StateHasChanged();

        var dealerCard = dealer.Deal();
        dealerCard.IsVisible = false;
        await dealer.AddCard(dealerCard);
        StateHasChanged();

        //Deal another card to each player and the dealer; these will all be visible.
        await dealer.DealToPlayer(player);
        StateHasChanged();

        await dealer.DealToSelf();
        StateHasChanged();

        state = GameState.InProgress;

        //If the player has a natural blackjack, the hand is over.
        if (player.HasNaturalBlackjack)
        {
            EndHand();
        }
    }

    public async Task NewHand()
    {
        //Payout the player's bets
        player.Collect();

        //Clear the hands
        player.ClearHand();
        dealer.ClearHand();

        //Reset the game area
        state = GameState.NotStarted;

        //Easter egg!
        if(player.Funds > 1000)
        {
            state = GameState.EscortedOut;
            return;
        }

        //Begin a new hand!
        await InitializeHand();
    }

    public async Task Delay(int millis)
    {
        await Task.Delay(millis);
        StateHasChanged();
    }

    public async Task DealerTurn()
    {
        if(dealer.Score < 17)
        {
            await dealer.DealToSelf();
            StateHasChanged();
            await DealerTurn();
        }
    }

    public async Task Hit()
    {
        await dealer.DealToPlayer(player);
        if(player.IsBusted)
        {
            EndHand();
        }
    }

    public async Task Stand()
    {
        player.HasStood = true;
        dealer.Reveal();

        await DealerTurn();

        EndHand();
    }

    public void EndHand()
    {
        state = GameState.Payout;
        if (player.HasNaturalBlackjack && dealer.Score != 21)
        {
            //Player gets their bet back, plus 1.5 * the bet
            player.Change += player.Bet * 1.5M;
        }
        else if (!player.IsBusted && dealer.IsBusted)
        {
            //If the player is not busted but the dealer is, the player gets the amount of their bet back, plus the bet again.
            player.Change += player.Bet;
        }
        else if (!dealer.IsBusted && !player.IsBusted && player.Score > dealer.Score)
        {
            //This is a "normal" win condition; the player has more than the dealer and neither are busted.
            player.Change += player.Bet;
        }
        else if (!dealer.IsBusted && !player.IsBusted && player.Score == dealer.Score)
        {
            //If there's a push, no money changes hands
        }
        else //In all other situations, the player loses their bet.
        {
            player.Change += player.Bet * -1;
        }

        //No matter what, the player's bet gets reset
        player.Bet = 0;
        player.HasStood = false;
    }

    public async Task DoubleDown()
    {
        player.HasStood = true;
        //The player may only do this if their shown score is 9, 10, or 11.
        //If this happens, the player doubles their bet.
        player.Bet *= 2;

        await Delay(300);

        //The player then gets one additional card
        await player.AddCard(dealer.Deal());

        //At this point, the player is forced to stand.
        await Stand();
    }

    //If the dealer has an Ace showing, the player may choose to make an insurance bet.
    //If the player chooses to make an insurance bet, they place a separate bet of 1/2 the original bet
    //The dealer then looks at the hidden card.
    //If the hidden card is a ten card, the dealer pays back the player at 2-to-1.
    //Otherwise, the player loses the insurance bet, and play continues as normal
    public void Insurance()
    {
        state = GameState.Insurance;

        if(dealer.HasAceShowing)
        {
            //Insurance bet is half the original bet
            player.InsuranceBet = player.Bet / 2;

            if(dealer.Score == 21) //If the dealer has Blackjack
            {
                //Reveal the hidden card
                dealer.Reveal();

                //Pay the player twice the insurance bet
                player.Change += player.InsuranceBet * 2;

                //Go straight to the Payout state
                state = GameState.Payout;
                StateHasChanged();
                EndHand();
            }
            else
            {
                //Player loses their insurance bet
                player.Change -= player.InsuranceBet;
            }
        }

        //Unless the hand is over, play continues normally.
        state = GameState.InProgress;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
