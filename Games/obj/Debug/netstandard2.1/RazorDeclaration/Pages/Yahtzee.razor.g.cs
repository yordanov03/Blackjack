// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Games.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Blackjack\BlazorGames\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Blackjack\BlazorGames\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Blackjack\BlazorGames\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Blackjack\BlazorGames\_Imports.razor"
using Games;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Blackjack\BlazorGames\_Imports.razor"
using Games.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Blackjack\BlazorGames\Pages\Yahtzee.razor"
using Games.Models.Yahtzee;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Blackjack\BlazorGames\Pages\Yahtzee.razor"
using Games.Models.Yahtzee.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Blackjack\BlazorGames\Pages\Yahtzee.razor"
using Games.Models.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Blackjack\BlazorGames\Pages\Yahtzee.razor"
using Games.Pages.Partials;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/yahtzee")]
    public partial class Yahtzee : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 10 "C:\Blackjack\BlazorGames\Pages\Yahtzee.razor"
       
    public DieCollection Dice { get; set; } = new DieCollection();

    public PlayCollection PlaysMade { get; set; } = new PlayCollection();

    public int TurnsRemaining { get; set; } = 13;

    public int RollsRemaining { get; set; } = 3;

    public bool IsStartOfTurn { get { return RollsRemaining >= 3; } }

    public bool IsGameOver { get { return TurnsRemaining <= 0; } }

    public bool ShowRules { get; set; }

    public int TotalScore
    {
        get
        {
            if (PlaysMade.HasBonus())
            {
                return PlaysMade.GetTotal() + 35;
            }
            return PlaysMade.GetTotal();
        }
    }

    public Yahtzee()
    {
        Initialize();
    }

    public void Initialize()
    {
        Dice.Reset();

        PlaysMade.Reset();
        TurnsRemaining = 13;
        RollsRemaining = 3;
    }

    public async Task RollDice()
    {
        Random rand = new Random();

        var unheldDice = Dice.Dice.Where(x => x.IsHeld == false);

        foreach (var die in unheldDice)
        {
            die.State = DieState.Rolling;
        }

        foreach (var die in unheldDice)
        {
            await Task.Delay(200);
            die.State = DieState.Stopped;
            die.Value = rand.Next(1, 7);
            StateHasChanged();
        }
        RollsRemaining--;
    }

    public void NextTurn()
    {
        RollsRemaining = 3;
        TurnsRemaining--;
        Dice.ReleaseHold();
    }

    public bool CanMakePlay(PlayType type)
    {
        switch (type)
        {
            case PlayType.Ones:
                return Dice.HasThreeOnes();

            case PlayType.Twos:
                return Dice.HasThreeTwos();

            case PlayType.Threes:
                return Dice.HasThreeThrees();

            case PlayType.Fours:
                return Dice.HasThreeFours();

            case PlayType.Fives:
                return Dice.HasThreeFives();

            case PlayType.Sixes:
                return Dice.HasThreeSixes();

            case PlayType.Yahtzee:
            case PlayType.BonusYahtzee:
                return Dice.HasYahtzee();

            case PlayType.ThreeOfAKind:
                return Dice.HasThreeOfAKind();

            case PlayType.FourOfAKind:
                return Dice.HasFourOfAKind();

            case PlayType.FullHouse:
                return Dice.HasFullHouse();

            case PlayType.SmallStraight:
                return Dice.HasSmallStraight();

            case PlayType.LargeStraight:
                return Dice.HasLargeStraight();

            case PlayType.Chance:
                return true;

            default: return false;
        }
    }

    public void ClaimPlay(PlayType type)
    {
        switch (type)
        {
            case PlayType.Ones:
                PlaysMade.Add(type, Dice.GetSumOf(1));
                break;

            case PlayType.Twos:
                PlaysMade.Add(type, Dice.GetSumOf(2));
                break;

            case PlayType.Threes:
                PlaysMade.Add(type, Dice.GetSumOf(3));
                break;

            case PlayType.Fours:
                PlaysMade.Add(type, Dice.GetSumOf(4));
                break;

            case PlayType.Fives:
                PlaysMade.Add(type, Dice.GetSumOf(5));
                break;

            case PlayType.Sixes:
                PlaysMade.Add(type, Dice.GetSumOf(6));
                break;

            case PlayType.Yahtzee:
                PlaysMade.Add(type, 50);
                break;

            case PlayType.BonusYahtzee:
                PlaysMade.Add(type, 100);
                break;

            case PlayType.ThreeOfAKind:
                PlaysMade.Add(type, Dice.GetOfAKindTotal(3));
                break;

            case PlayType.FourOfAKind:
                PlaysMade.Add(type, Dice.GetOfAKindTotal(4));
                break;

            case PlayType.FullHouse:
                PlaysMade.Add(type, 25);
                break;

            case PlayType.SmallStraight:
                PlaysMade.Add(type, 30);
                break;

            case PlayType.LargeStraight:
                PlaysMade.Add(type, 40);
                break;

            case PlayType.Chance:
                PlaysMade.Add(type, Dice.Dice.Sum(x => x.Value));
                break;
        }

        NextTurn();
    }

    public void ScratchPlay(PlayType type)
    {
        PlaysMade.Add(type, 0);
        NextTurn();
    }

    public string GetRank()
    {
        if (!IsGameOver) return "Finish the game first!";

        if (TotalScore <= 112) return "D";

        if (TotalScore > 112 && TotalScore <= 168) return "C";

        if (TotalScore > 168 && TotalScore <= 224) return "B";

        if (TotalScore > 224 && TotalScore <= 280) return "A";

        if (TotalScore > 280 && TotalScore <= 364) return "S";

        if (TotalScore > 364) return "S+";

        return "";
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
