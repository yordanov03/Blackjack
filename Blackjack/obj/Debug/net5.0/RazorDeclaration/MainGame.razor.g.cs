// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blackjack
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Blackjack\Blackjack\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Blackjack\Blackjack\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Blackjack\Blackjack\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Blackjack\Blackjack\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Blackjack\Blackjack\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Blackjack\Blackjack\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Blackjack\Blackjack\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Blackjack\Blackjack\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Blackjack\Blackjack\_Imports.razor"
using Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Blackjack\Blackjack\MainGame.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Blackjack\Blackjack\MainGame.razor"
using Models.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Blackjack\Blackjack\MainGame.razor"
using Pages.Partials;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/blackjack")]
    public partial class MainGame : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 8 "C:\Blackjack\Blackjack\MainGame.razor"
       
    Dealer dealer = new Dealer(); //Creating a new Dealer also
                                  //creates a new, shuffled CardDeck
    Player player = new Player();

    GameState state = GameState.NotStarted;


    public async Task Bet(decimal amount)
    {
        if (player.Funds >= amount)
        {
            player.Bet += amount;
            await Deal();
        }
    }

    public async Task Delay(int milisec)
    {
        await Task.Delay(milisec);
        StateHasChanged();
    }

    public async Task InitializeHand()
    {
        if (dealer.Deck.Count < 13)
        {
            state = GameState.Shuffling;
            dealer.Deck = new CardDeck();
            await Delay(1000);
        }
    }

    public async Task Deal()
    {
        state = GameState.Dealing;

        //Deal cards. Cards not visible

        await dealer.DealToPlayer(player);
        StateHasChanged();

        var dealerCard = dealer.Deal();
        dealerCard.IsVisible = false;
        await dealer.AddCard(dealerCard);
        StateHasChanged();

        //Deal another card to dealer and player
        await dealer.DealToPlayer(player);
        StateHasChanged();

        await dealer.DealToSelf();
        StateHasChanged();

        state = GameState.InProgress;

        if (player.HasNaturalBlackjack)
        {
            EndHand();
        }
    }

    public async Task DealerTurn()
    {
        if (dealer.Score < 17)
        {
            await dealer.DealToSelf();
            StateHasChanged();
            await DealerTurn();
        }
    }

    public async Task Hit()
    {
        await dealer.DealToPlayer(player);

        if (player.IsBusted)
        {
            EndHand();
        }
    }

    public async Task Stand()
    {
        player.HasStood = true;
        dealer.Reveal();

        await DealerTurn();

        EndHand();
    }

    public async Task DoubleDown()
    {
        player.HasStood = true;
        //Only if shown score is 9,10, 11
        //If yes, the player doubles the bet
        player.Bet *= 2;

        await Delay(3000);

        //Player gets additional card
        await player.AddCard(dealer.Deal());

        //Forced to stand
        await Stand();
    }

    public void Insurance()
    {
        state = GameState.Insurance;

        if (dealer.HasAceShowing)
        {
            //Insuranec bet is half the original bet
            player.InsuranceBet = player.Bet / 2;

            if (dealer.Score == 21)
            {
                dealer.Reveal();

                player.Change += player.InsuranceBet * 2;

                state = GameState.Payout;
                StateHasChanged();
                EndHand();
            }

            else
            {
                player.Change -= player.InsuranceBet;
            }
        }

        state = GameState.InProgress;
    }

    public void EndHand()
    {
        state = GameState.Payout;

        if (player.HasNaturalBlackjack && dealer.Score != 21)
        {
            player.Change += player.Bet * 1.5M;
        }

        else if (!player.IsBusted && dealer.IsBusted)
        {
            player.Change += player.Bet;
        }

        else if (!dealer.IsBusted && !player.IsBusted && player.Score > dealer.Score)
        {
            player.Change += player.Bet;
        }

        else if (!dealer.IsBusted && !player.IsBusted && player.Score == dealer.Score)
        {
            //just  push
        }

        else
        {
            player.Change += player.Bet * -1;
        }

        player.Bet = 0;
        player.HasStood = false;
    }

    public async Task NewHand()
    {
        player.Collect();

        player.ClearHand();
        dealer.ClearHand();

        state = GameState.NotStarted;

        await InitializeHand();
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
