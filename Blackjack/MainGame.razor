@page "/blackjack"

@using Models
@using Models.Enums;
@using Pages.Partials;


@code {
    Dealer dealer = new Dealer(); //Creating a new Dealer also
                                  //creates a new, shuffled CardDeck
    Player player = new Player();

    GameState state = GameState.NotStarted;


    public async Task Bet(decimal amount)
    {
        if (player.Funds >= amount)
        {
            player.Bet += amount;
            await Deal();
        }
    }

    public async Task Delay(int milisec)
    {
        await Task.Delay(milisec);
        StateHasChanged();
    }

    public async Task InitializeHand()
    {
        if (dealer.Deck.Count < 13)
        {
            state = GameState.Shuffling;
            dealer.Deck = new CardDeck();
            await Delay(1000);
        }
    }

    public async Task Deal()
    {
        state = GameState.Dealing;

        //Deal cards. Cards not visible

        await dealer.DealToPlayer(player);
        StateHasChanged();

        var dealerCard = dealer.Deal();
        dealerCard.IsVisible = false;
        await dealer.AddCard(dealerCard);
        StateHasChanged();

        //Deal another card to dealer and player
        await dealer.DealToPlayer(player);
        StateHasChanged();

        await dealer.DealToSelf();
        StateHasChanged();

        state = GameState.InProgress;

        if (player.HasNaturalBlackjack)
        {
            EndHand();
        }
    }

    public async Task DealerTurn()
    {
        if (dealer.Score < 17)
        {
            await dealer.DealToSelf();
            StateHasChanged();
            await DealerTurn();
        }
    }

    public async Task Hit()
    {
        await dealer.DealToPlayer(player);

        if (player.IsBusted)
        {
            EndHand();
        }
    }

    public async Task Stand()
    {
        player.HasStood = true;
        dealer.Reveal();

        await DealerTurn();

        EndHand();
    }

    public async Task DoubleDown()
    {
        player.HasStood = true;
        //Only if shown score is 9,10, 11
        //If yes, the player doubles the bet
        player.Bet *= 2;

        await Delay(3000);

        //Player gets additional card
        await player.AddCard(dealer.Deal());

        //Forced to stand
        await Stand();
    }

    public void Insurance()
    {
        state = GameState.Insurance;

        if (dealer.HasAceShowing)
        {
            //Insuranec bet is half the original bet
            player.InsuranceBet = player.Bet / 2;

            if (dealer.Score == 21)
            {
                dealer.Reveal();

                player.Change += player.InsuranceBet * 2;

                state = GameState.Payout;
                StateHasChanged();
                EndHand();
            }

            else
            {
                player.Change -= player.InsuranceBet;
            }
        }

        state = GameState.InProgress;
    }

    public void EndHand()
    {
        state = GameState.Payout;

        if (player.HasNaturalBlackjack && dealer.Score != 21)
        {
            player.Change += player.Bet * 1.5M;
        }

        else if (!player.IsBusted && dealer.IsBusted)
        {
            player.Change += player.Bet;
        }

        else if (!dealer.IsBusted && !player.IsBusted && player.Score > dealer.Score)
        {
            player.Change += player.Bet;
        }

        else if (!dealer.IsBusted && !player.IsBusted && player.Score == dealer.Score)
        {
            //just  push
        }

        else
        {
            player.Change += player.Bet * -1;
        }

        player.Bet = 0;
        player.HasStood = false;
    }

    public async Task NewHand()
    {
        player.Collect();

        player.ClearHand();
        dealer.ClearHand();

        state = GameState.NotStarted;

        await InitializeHand();
    }
}



<div class="row">
        <div class="col-3">
            <div>
                @{
                    int cardCount = dealer.Deck.Count + 1;
                }
                @while (cardCount > 0)
                {
                    <div class="blackjack-drawdeck">
                        <img src="images/cardBack.png" />
                    </div>
                    cardCount -= 13;
                }
            </div>
        </div>
        <div class="col-3">
            <Blackjack.Pages.Partials.BlackjackHand Cards="dealer.Cards"/>
        </div>
        <div class="col-3">
            <Blackjack.Pages.Partials.BlackjackScore State="state" Player="dealer" />
        </div>
    </div>



    <div class="row">
        <div class="col-3">
            @if (state == GameState.Betting)
            {
                @if (player.Funds < 10)
                {
                    <span class="display-3 text-danger">Out of money</span>
                }
                @if (player.Funds >= 10)
                {
                    <button class="btn btn-primary" @onclick="(()=> Bet(10))">Bet $10</button>
                }
                @if (player.Funds >= 20)
                {
                    <button class="btn btn-primary" @onclick="(()=> Bet(20))">Bet $20</button>
                }
                @if (player.Funds >= 50)
                {
                    <button class="btn btn-primary" @onclick="(()=> Bet(50))">Bet $50</button>
                }
            }
        </div>
        <div class="col-3">
            @if(state == GameState.Payout)
            {
                <Blackjack.Pages.Partials.BlackjackHandResult Player="player" Dealer="dealer"/>
            }

            @if(state == GameState.Dealing || state == GameState.Shuffling || state == GameState.InProgress)
            {
                <Blackjack.Pages.Partials.BlackjackMessage State="state" Bet="player.Bet"/>
            }
        </div>

        <div class="col-3">

        </div>
    </div>

    <div class="row">
        <div class="col-3">
            @if (state == GameState.NotStarted)
            {
                <button class="btn btn-secondary"
                        @onclick="(() => InitializeHand())">
                    Start Game
                </button>
            }

            @if (!player.IsBusted && state == GameState.InProgress && !player.HasStood)
            {
                <button class="btn btn-primary" @onclick="(() => Stand())">
                    Stand
                </button>
                <button class="btn btn-primary" @onclick="(() => Hit())">
                    Hit
                </button>

                @if (player.Score >= 9
                  && player.Score <= 11
                  && player.Cards.Count == 2
                  && player.Funds >= player.Bet * 2)
                {
                    <br />
                    <button class="btn btn-warning"
                            @onclick="(() => DoubleDown())">
                        Double Down
                    </button>
                }

                @if (dealer.HasAceShowing && !player.HasInsurance)
                {
                    <br />
                    <button class="btn btn-warning"
                            @onclick="(() => Insurance())">
                        Insurance ($@(player.Bet / 2))
                    </button>
                }
            }

            @if (state == GameState.Payout)
            {
                <button class="btn btn-secondary" @onclick="(() => NewHand())">
                    Keep Going!
                </button>
            }
        </div>
        <div class="col-3">
            <Blackjack.Pages.Partials.BlackjackHand Cards="player.Cards" />
        </div>
        <div class="col-3">
            <Blackjack.Pages.Partials.BlackjackScore State="state" Player="player" />
        </div>
    </div>
